{"version":3,"file":"static/js/541.1af180d1.chunk.js","mappings":"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","sources":["components/Cast/Cast.js","utils/Global.js","utils/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'utils/api';\nimport { IMG_PATH } from 'utils/Global';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState(null);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getCast() {\n      try {\n        setLoading(true);\n        setError(false);\n        const fetchedCast = await getMovieCast(movieId, controller.signal);\n        setMovieCast(fetchedCast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n    return () => controller.abort;\n  }, [movieId]);\n  return (\n    <div>\n      {error && <div>Something went wrong, try again.</div>}\n      {loading && <div>Movies are loading, please wait.</div>}\n      {movieCast &&\n        movieCast.cast.slice(0, 10).map(actor => (\n          <div key={actor.id}>\n            <img\n              src={`${IMG_PATH}${actor.profile_path}`}\n              alt={actor.name}\n              width=\"200px\"\n            />\n            <h1>{actor.name}</h1>\n            <p>Character: {actor.character}</p>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Cast;\n","const API_KEY = 'ad57a1cb54651b0ec3ddf406d1d39fd8';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst AUTH_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhZDU3YTFjYjU0NjUxYjBlYzNkZGY0MDZkMWQzOWZkOCIsInN1YiI6IjY0MzY1ZGIyOTQ2MzE4MDEyNjM4YmFlNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.0MaGaafY6aZaycjfml7ZFP5IeOK1GQtKuKpxIF3v51o';\nconst IMG_PATH = 'https://image.tmdb.org/t/p/original';\nexport { API_KEY, BASE_URL, AUTH_KEY, IMG_PATH };\n","import axios from 'axios';\nimport { BASE_URL, AUTH_KEY } from './Global';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.headers = {\n  Authorization: AUTH_KEY,\n  accept: 'application/json',\n};\nasync function getMovies(controllerSignal) {\n  const r = await axios.get('trending/all/day?language=en-US', {\n    signal: controllerSignal,\n  });\n  return r.data.results;\n}\n\nasync function getMovieDetails(id, controllerSignal) {\n  const r = await axios.get(`/movie/${id}?language=en-US`, {\n    signal: controllerSignal,\n  });\n  return r.data;\n}\n\nasync function getMovieCast(id, controllerSignal) {\n  const r = await axios.get(`/movie/${id}}/credits?language=en-US`, {\n    signal: controllerSignal,\n  });\n  return r.data;\n}\nasync function getMovieReviews(id, controllerSignal) {\n  const r = await axios.get(`/movie/${id}}/reviews?language=en-US&page=1`, {\n    signal: controllerSignal,\n  });\n  return r.data.results;\n}\nasync function getMoviesByQuery(query, controllerSignal) {\n  const r = await axios.get(\n    `search/movie?query=${query}&include_adult=true&language=en-US`,\n    {\n      signal: controllerSignal,\n    }\n  );\n  return r.data.results;\n}\nexport {\n  getMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n"],"names":["movieId","useParams","useState","movieCast","setMovieCast","error","setError","loading","setLoading","useEffect","controller","AbortController","getMovieCast","signal","fetchedCast","getCast","abort","cast","slice","map","actor","src","IMG_PATH","profile_path","alt","name","width","character","id","BASE_URL","AUTH_KEY","getMovies","controllerSignal","axios","r","data","results","getMovieDetails","getMovieReviews","getMoviesByQuery","query","Authorization","accept"],"sourceRoot":""}